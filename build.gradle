apply plugin: 'groovy'
apply plugin: 'idea'
version = '0.1'
defaultTasks 'clean', 'build'

configurations {
    provided {
        description = 'Non-exported compile-time dependencies'
    }

    testProvided {
        description = 'Non-exported compile-time test dependencies'
    }
}

sourceSets {
    main {
        compileClasspath += configurations.provided
        compileClasspath += configurations.testProvided
    }

    test {
        compileClasspath += configurations.testProvided
        runtimeClasspath += configurations.testProvided
    }
}

repositories {
    mavenCentral()
}

dependencies {
    groovy group: 'org.codehaus.groovy', name: 'groovy', version: '1.7.+'
    compile group: 'net.sf.json-lib', name: 'json-lib', version: '2.3', classifier: 'jdk15'
    testCompile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'org.springframework', name: 'spring-test', version: '3.+'
    testCompile group: 'org.springframework', name: 'spring-core', version: '3.+'
    testProvided group: 'org.apache.geronimo.specs', name: 'geronimo-servlet_2.5_spec', version: '1.2'
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Gaelyk JSON-lib plugin',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty("user.name"),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty("java.version")
    }
}

ideaProject {
    javaVersion = '1.6'
}

ideaModule {
    scopes.COMPILE.plus.add(configurations.provided)
    scopes.COMPILE.plus.add(configurations.testProvided)
    scopes.TEST.plus.add(configurations.testProvided)
}

def distDir = "$buildDir/dist"
def distLibDir = "$distDir/war/WEB-INF/lib"

task copyDistResources << {
    description = "Copies dist resources"

    ant.delete(dir: distDir)

    ant.copy todir: "$distDir/war", {
        fileset dir: "war"
    }

    ant.copy file: jar.archivePath, todir: distLibDir
}

task copyRuntimeLibraries(type: Copy) {
    description = "Copies runtime libraries to dist"

    into distLibDir
    from configurations.runtime.files { dep -> dep.group == 'net.sf.json-lib' }
}

task zipDist(type: Zip, dependsOn: [copyDistResources, copyRuntimeLibraries]) {
    description = "Zips distribution"

    from distDir
}

task dist(dependsOn: [copyDistResources, copyRuntimeLibraries, zipDist]) << {
    description = "Creates plugin distribution"
}